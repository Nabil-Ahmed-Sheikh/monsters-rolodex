{"version":3,"sources":["component/Card/Card.js","component/CardList/CardList.js","component/SearchBox/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","placeHolder","onChange","handleChange","App","useState","setMonsters","searchField","setSearchField","useEffect","fetch","then","res","json","users","filteredMonster","filter","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAceA,MAVf,SAAcC,GACV,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,Y,MCOfC,MAZf,SAAkBP,GACd,OACI,qBAAKC,UAAU,YAAf,SAEED,EAAMQ,SAASC,KAAI,SAACN,GAAD,OACjB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,U,MCKhBM,MAXf,SAAmBV,GACf,OACI,uBACAC,UAAU,SACVU,KAAK,SACJC,YAAaZ,EAAMa,YAClBC,SAAUd,EAAMe,gBCyBXC,MA7Bf,WAAgB,IAAD,EAEiBC,mBAAS,IAF1B,mBAERT,EAFQ,KAEEU,EAFF,OAGuBD,mBAAS,IAHhC,mBAGRE,EAHQ,KAGKC,EAHL,KASbC,qBAAU,WACRC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAIR,EAAY,YAAIQ,SAC9B,IAEH,IAAMC,EAAmBnB,EAASoB,QAAO,SAAAzB,GAAO,OAC9CA,EAAQE,KAAKwB,cAAcC,SAASX,EAAYU,kBAIlD,OACE,sBAAK5B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWY,YAAY,kBAAkBE,aAlBxB,SAACgB,GACpBX,EAAeW,EAAEC,OAAOC,UAkBtB,cAAC,EAAD,CAAUzB,SAAUmB,QCjBXO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c9052fcd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport \"./Card.css\"\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\nimport './CardList.css';\r\n\r\nfunction CardList(props) {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {\r\n          props.monsters.map((monster) => \r\n            <Card key={monster.id} monster={monster} />\r\n          )\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport \"./SearchBox.css\"\r\n\r\nfunction SearchBox(props) {\r\n    return (\r\n        <input \r\n        className=\"search\"\r\n        type='search'\r\n         placeholder={props.placeHolder}\r\n          onChange={props.handleChange} \r\n        />\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import './App.css';\nimport {useState, useEffect } from 'react';\nimport CardList from \"./component/CardList/CardList\";\nimport SearchBox from \"./component/SearchBox/SearchBox\";\n\nfunction App() {\n\n  let [monsters, setMonsters] = useState([]);\n  let [searchField, setSearchField] = useState(\"\");\n\n  const handleChange = (e) => {\n    setSearchField(e.target.value)\n  }\n\n  useEffect(() =>{\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => setMonsters([...users]))\n  }, [])\n  \n  const filteredMonster =  monsters.filter(monster =>\n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n    \n    )\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeHolder=\"Search Monsters\" handleChange={handleChange} />\n      <CardList monsters={filteredMonster} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}